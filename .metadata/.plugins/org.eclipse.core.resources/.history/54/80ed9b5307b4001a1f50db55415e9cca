package com.example.demo.controller;


import com.example.demo.model.Test;
import com.example.demo.payload.UploadFileResponse;
import com.example.demo.service.TestService;

import io.swagger.annotations.Api;

//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
//import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Api( value="file Api ",description= "API pour les op√©rations sur les fichiers que va envoye le chef de projet.")
@RestController
public class TestController {

    //private static final Logger logger = LoggerFactory.getLogger(TestController.class);

    @Autowired
    private TestService dbFileStorageService;

    @PostMapping("/uploadFile/{idChefProjet}")
    public UploadFileResponse uploadFile(@RequestParam("file") MultipartFile file,@PathVariable("idChefProjet") long idChefProjet) {
        Test dbFile = dbFileStorageService.storeFile(file,idChefProjet);

        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/downloadFile/")
                .path(dbFile.getId_test())
                .toUriString();

        return new UploadFileResponse(dbFile.getTest_name(), fileDownloadUri,
                 file.getSize());
    }

    @PostMapping("/uploadMultipleFiles/{idchefProjet}")
    public List<UploadFileResponse> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files, @PathVariable("idchefProjet") long idChefProjet) {
        return Arrays.asList(files)
                .stream()
                .map(file -> uploadFile(file, idChefProjet))
                .collect(Collectors.toList());
    }

    @GetMapping("/downloadFile/{fileId}")
    public ResponseEntity<Resource> downloadFile(@PathVariable("fileId") String fileId) {
        // Load file from database
        Test dbFile = dbFileStorageService.getFile(fileId);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + dbFile.getTest_name() + "\"")
                .body(new ByteArrayResource(dbFile.getTest_content()));
    }
    
    @GetMapping("/downloadAllFile")
    public ResponseEntity<Resource> downloadFile() {
        // Load file from database
    	List<Test> tests=(List<Test>)= dbFileStorageService.getAllFile();

        return tests
    }

}